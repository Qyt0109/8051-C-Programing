C51 COMPILER V9.60.0.0   LCD                                                               11/11/2023 14:49:12 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\lcd.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Libraries\LCD\lcd.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\lcd.lst) TABS(2) OBJECT(.\Objects\lcd.obj)

line level    source

   1          #include "lcd.h"
   2          #include "main.h"
   3          
   4          // Validation
   5          #ifndef LCD_SETTINGS_USING_DELAY
                #error "Missing #define LCD_SETTINGS_USING_DELAY LCD_DELAY_TIMER or #define LCD_SETTINGS_USING_DELAY LCD_
             -DELAY_FOR_LOOP in main.h file!"
              #endif
   8          
   9          #ifndef LCD_SETTINGS_DISPLAY_MODE
                #error "Missing #define LCD_SETTINGS_DISPLAY_MODE LCD_4BIT_1LINE_5x7FONT/LCD_4BIT_2LINE_5x7FONT/LCD_8BIT_
             -1LINE_5x7FONT/LCD_8BIT_2LINE_5x7FONT in main.h file!"
              #endif
  12          
  13          // Implement coresponding LCD_delay_ms
  14          #if(LCD_SETTINGS_USING_DELAY == LCD_DELAY_TIMER)
                #error "Not yet implement LCD_delay_us for this LCD_SETTINGS_USING_DELAY config!"
                void LCD_delay_us(unsigned int t_us)
                {
                  // TODO: Implement this
                }
              #elif(LCD_SETTINGS_USING_DELAY == LCD_DELAY_FOR_LOOP)
  21            void LCD_delay_us(unsigned int t_us)
  22            {
  23   1          delay_us(t_us);
  24   1        }
  25          #else
                #error "No any LCD_SETTINGS_USING_DELAY with that code, make sure using LCD_DELAY_TIMER or LCD_DELAY_FOR_
             -LOOP instead!"
              #endif
  28          
  29          #if(LCD_SETTINGS_DISPLAY_MODE == LCD_4BIT_1LINE_5x7FONT || LCD_SETTINGS_DISPLAY_MODE == LCD_4BIT_2LINE_5x7
             -FONT)
  30            void LCD_out(unsigned char byte)
  31            {
  32   1          LCD_D0 = byte & 0x01;   // ---- ---x
  33   1          LCD_D1 = byte & 0x02;   // ---- --x-
  34   1          LCD_D2 = byte & 0x04;   // ---- -x--
  35   1          LCD_D3 = byte & 0x08;   // ---- x---
  36   1        }
  37            void LCD_cmd(unsigned char cmd)
  38            {
  39   1          
  40   1        }
*** WARNING C280 IN LINE 37 OF ..\..\Libraries\LCD\lcd.c: 'cmd': unreferenced local variable
  41          #elif(LCD_SETTINGS_DISPLAY_MODE == LCD_8BIT_1LINE_5x7FONT || LCD_SETTINGS_DISPLAY_MODE == LCD_8BIT_2LINE_5
             -x7FONT)
                void LCD_out(unsigned char byte)
                {
                  LCD_D0 = byte & 0x01;   // ---- ---x
                  LCD_D1 = byte & 0x02;   // ---- --x-
                  LCD_D2 = byte & 0x04;   // ---- -x--
                  LCD_D3 = byte & 0x08;   // ---- x---
                  LCD_D4 = byte & 0x10;   // ---x ----
C51 COMPILER V9.60.0.0   LCD                                                               11/11/2023 14:49:12 PAGE 2   

                  LCD_D5 = byte & 0x20;   // --x- ----
                  LCD_D6 = byte & 0x40;   // -x-- ----
                  LCD_D7 = byte & 0x80;   // x--- ----
                }
                void LCD_send(unsigned char byte)
                {
                  LCD_RS = LOW;
                  LCD_out(byte);
                  LCD_EN = LOW;
                  LCD_EN = HIGH;
                }
                void LCD_send_cmd(unsigned char cmd)
                {
                  LCD_send(cmd);
                  if(cmd == LCD_CLEAR || cmd == LCD_RETURN_HOME)
                    LCD_delay_us(1502);
                  else
                    LCD_delay_us(37);
                }
              #else
                #error "No any LCD_SETTINGS_DISPLAY_MODE with that code, make sure using LCD_4BIT_1LINE_5x7FONT/LCD_4BIT_
             -2LINE_5x7FONT/LCD_8BIT_1LINE_5x7FONT/LCD_8BIT_2LINE_5x7FONT instead!"
              #endif
  71            
  72          
  73          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     24    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
